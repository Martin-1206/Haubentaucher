<?xml version="1.0"?>

<robot xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Macro for the inertia of a box -->
  <xacro:macro name="box_inertia" params="x y z mass">
    <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
      iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
      izz="${0.0833333 * mass * (x*x + y*y)}" />
  </xacro:macro>

  <!-- Macro for the inertial properties of a box -->
  <xacro:macro name="box_inertial" params="x y z mass *origin">
    <inertial>
      <mass value="${mass}" />
      <xacro:insert_block name="origin" />
      <xacro:box_inertia x="${x}" y="${y}" z="${z}" mass="${mass}" />
    </inertial>
  </xacro:macro>

  <!-- Main multirotor link -->
  <xacro:macro name="multirotor_base_macro"
    params="robot_namespace mass body_width body_height mesh_file mesh_scale *origin *inertia">
    <gazebo reference="${robot_namespace}/base_link">
      <collision>
        <surface>
          <contact>
            <collide_bitmask>${collision_bitmask}</collide_bitmask>
          </contact>
        </surface>
      </collision>
    </gazebo>
    <link name="${robot_namespace}/base_link"></link>
    <joint name="base_joint" type="fixed">
      <xacro:insert_block name="origin"/>
      <parent link="${robot_namespace}/base_link" />
      <child link="${robot_namespace}/base_link_inertia" />
    </joint>

    <gazebo reference="${robot_namespace}/base_link_inertia">
      <collision>
        <surface>
          <contact>
            <collide_bitmask>${collision_bitmask}</collide_bitmask>
          </contact>
        </surface>
      </collision>
    </gazebo>
    
    <link name="${robot_namespace}/base_link_inertia">
      <inertial>
        <mass value="${mass}" />  <!-- [kg] -->
        <origin xyz="0 0 0" />
        <xacro:insert_block name="inertia" />
      </inertial>

      <visual>
        <geometry>
          <mesh filename="package://${mesh_file}"
            scale="${mesh_scale} ${mesh_scale} ${mesh_scale}" />
          <!--box size="${body_width} ${body_width} ${body_height}"/--> <!-- [m] [m] [m] -->
        </geometry>
        <origin xyz="-${body_width/2 + 0.015} -${body_width/2 + 0.015} 0" rpy="0 0 0"/> <!-- 0.015 found out by iteration -->                       
      </visual>

      <collision>
        <geometry>
          <!-- mesh filename="package://${mesh_file}"
            scale="${mesh_scale} ${mesh_scale} ${mesh_scale}" /--> <!-- [m] [m] [m] -->
          <box size="${body_width} ${body_width} ${body_height}"/> <!-- [m] [m] [m] -->          
        </geometry>
        <origin xyz="0 0 ${body_height/2 + 0.015}" rpy="0 0 0"/> <!-- 0.015 found out by iteration -->
      </collision>
    </link>

    <!-- IMU -->
    <link name="imu_link">
      <inertial>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0"
          izz="0.001" />
        <mass value="0.01" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>

    <gazebo reference="imu_link">
      <collision>
        <surface>
          <contact>
            <collide_bitmask>${collision_bitmask}</collide_bitmask>
          </contact>
        </surface>
      </collision>
      <sensor name="imu_sensor" type="imu">
        <always_on>true</always_on>
        <update_rate>50</update_rate>
        <visualize>true</visualize>
        <topic>/${robot_namespace}/imu</topic>

        <!-- IMU sensor has to be rotated accordint to the NED frame 
             defined in the ArduPilot plugin -->
        <pose>0 0 0 3.141593 0 0</pose>
        
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <topicName>/${robot_namespace}/imu</topicName>
          <bodyName>imu_link</bodyName>
          <updateRateHZ>50.0</updateRateHZ>
          <gaussianNoise>0.0</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <frameName>${robot_namespace}/imu</frameName>
        </plugin>
      </sensor>
    </gazebo>

    <!-- IMU joint -->
    <joint name="imu_joint" type="revolute">
      <parent link="${robot_namespace}/base_link" />
      <child link="imu_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    
    <!-- attach multirotor_base_plugin to the base_link -->
    <gazebo>
      <plugin filename="librotors_gazebo_multirotor_base_plugin.so" name="rosbag">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <linkName>${robot_namespace}/base_link</linkName>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Rotor joint and link -->
  <xacro:macro name="vertical_rotor"
    params="robot_namespace suffix direction motor_constant moment_constant parent mass_rotor radius_rotor time_constant_up time_constant_down max_rot_velocity motor_number rotor_drag_coefficient rolling_moment_coefficient color prop_scale *origin *inertia">
    <joint name="${robot_namespace}/rotor_${motor_number}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <!-- TODO(ff): not currently set because it's not yet supported -->
      <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
      <parent link="${parent}" />
      <child link="${robot_namespace}/rotor_${motor_number}" />

    </joint>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz> 
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
    <gazebo reference="${robot_namespace}/rotor_${motor_number}">
      <collision>
        <surface>
          <contact>
            <collide_bitmask>${collision_bitmask}</collide_bitmask>
          </contact>
        </surface>
      </collision>
    </gazebo>
    <link name="${robot_namespace}/rotor_${motor_number}">
      <inertial>
        <mass value="${mass_rotor}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <!-- <cylinder length="0.005" radius="${radius_rotor}"/> --> <!-- [m] -->
          <mesh filename="package://haubentaucher_description/meshes/propeller_${direction}.dae"
            scale="${prop_scale} ${prop_scale} ${prop_scale}" />
          <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" /> <!-- [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${suffix}_motor_model" filename="librotors_gazebo_motor_model.so">
        <jointName>${robot_namespace}/rotor_${motor_number}_joint</jointName>
        <linkName>${robot_namespace}/rotor_${motor_number}</linkName>
        <turningDirection>${direction}</turningDirection>
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>${max_rot_velocity}</maxRotVelocity>
        <motorConstant>${motor_constant}</motorConstant>
        <momentConstant>${moment_constant}</momentConstant>
        <commandSubTopic>${robot_namespace}/gazebo/command/motor_speed</commandSubTopic>
        <motorNumber>${motor_number}</motorNumber>
        <rotorDragCoefficient>${rotor_drag_coefficient}</rotorDragCoefficient>
        <rollingMomentCoefficient>${rolling_moment_coefficient}</rollingMomentCoefficient>
        <motorVelocityTopic>${robot_namespace}/motor_vel/${motor_number}</motorVelocityTopic>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>

    <gazebo reference="${robot_namespace}/rotor_${motor_number}">
      <material>Gazebo/${color}</material>
    </gazebo>

  </xacro:macro>
   
 

  

  
  
    <xacro:macro name="magnet_plugin" params="parent namespace name moment_x moment_y moment_z length offset">

      <joint name="${namespace}/electromagnet_joint" type="fixed">
        <axis xyz="0 1 0" />
        <origin xyz="0 0 ${-length}" rpy="0 0 0" />
        <parent link="${parent}"/>
        <child link="${namespace}/electromagnet_actuator"/>
      </joint>

      <joint name="${namespace}/electromagnet_joint_bar" type="fixed">
        <axis xyz="0 1 0" />
        <origin xyz="0 0 ${length/2}" rpy="0 0 0"/>
        <parent link="${namespace}/electromagnet_actuator"/>
        <child link="${namespace}/electromagnet_bar"/>
      </joint>

      <gazebo reference="${namespace}/electromagnet_bar">
        <collision>
          <surface>
            <contact>
              <collide_bitmask>${collision_bitmask}</collide_bitmask>
            </contact>
          </surface>
        </collision>
      </gazebo>
      <link name="${namespace}/electromagnet_bar">
        <inertial>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <mass value="0.00025"/>
          <inertia ixx="0.000001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.000001" />
        </inertial>

        <visual>
          <geometry>
            <cylinder radius="0.01" length="${length + offset}"/>
          </geometry>
        </visual>
      </link>

      <gazebo reference="${namespace}/electromagnet_actuator">
        <collision>
          <surface>
            <contact>
              <collide_bitmask>${collision_bitmask}</collide_bitmask>
            </contact>
          </surface>
        </collision>
      </gazebo>
      <link name="${namespace}/electromagnet_actuator">
        <inertial>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <mass value="0.025"/>
          <inertia ixx="0.0001" ixy="0" ixz="0" iyy ="0.0001" iyz = "0" izz = "0.0001" />
        </inertial>

        <collision name="collision">
          <geometry>
            <cylinder radius="0.08" length="0.035"/>
          </geometry>
        </collision>

        <visual>
          <geometry>
            <cylinder radius="0.08" length="0.035"/>
          </geometry>
          <origin xyz="0 0 ${-offset/2}" rpy="0 0 0" />
        </visual>
      </link>

       <gazebo reference="${namespace}/electromagnet_actuator">
        <material>Gazebo/Green</material>
      </gazebo>

      <gazebo>  
        <plugin name="dipole_magnet" filename="libstorm_gazebo_dipole_magnet.so">
          <bodyName>${namespace}/electromagnet_actuator</bodyName>
          <dipole_moment>${moment_x} ${moment_y} ${moment_z}</dipole_moment>
          <!-- Set to false if not using ROS -->
          <shouldPublish>true</shouldPublish>
          <topicNs>${namespace}/${name}</topicNs>
          <updateRate>100</updateRate>
          <gain>10.0</gain>
        </plugin>
      </gazebo>

    </xacro:macro>

</robot>
